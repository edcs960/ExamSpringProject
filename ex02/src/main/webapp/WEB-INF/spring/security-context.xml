<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 직접 작성한 Handler 클래스를 이용하기 위해 Bean에 저장 -->
	<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"></bean>
	<bean id="customLoginSuccess" class="org.zerock.security.CustomLoginSuccessHandler"></bean>
	
	<!-- 커스텀 패스워드 인코더에서 스프링 시큐리티에서 지원하는 API인 BcryptPasswordEncoder로 변경 -->
	<!-- <bean id="customPasswordEncoder" class="org.zerock.security.CustomNoOpPasswordEncoder"></bean> -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
	<bean id="customUserDetailsService" class="org.zerock.security.CustomUserDetailsService"></bean>
	
	<security:http>
		<!-- 
			security:intercept-url
			- pattern : URI 패턴
			- access : 권한 체크
		 -->
		<security:intercept-url pattern="/sample/all" access="permitAll"/>
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>
	
		
		<!-- 에러 페이지 -->
		<security:access-denied-handler ref="customAccessDenied"/>
	
		<!-- 
			로그인 페이지
			- 로그인을 성공했을 때 authentication-success-handler-ref에 설정된 핸들러로 진입
		-->
		<security:form-login login-page="/customLogin"/>
		
		<!-- 
			로그아웃 페이지 
			- 로그아웃 시 logout-url에 설정된 페이지로 요청
			- invalidate-session을 통해 세션정보를 제거
			- delete-cookies를 통해 쿠키 삭제
		-->
		<security:logout logout-url="/customLogout" invalidate-session="true" delete-cookies="remember-me, JSESSION_ID"/>
		
		<!-- 
			자동 로그인
			- key : 쿠키에 사용되는 값을 암호화하기 위한 키 값
			- data-source-ref : DataSource를 지정하고 테이블을 이용해서 기존 로그인 정보를 기록(옵션)
			- remember-me-cookie : 브라우저에 보관되는 쿠키의 이름을 지정, 기본값은 remember-me
			- remember-me-parameter : 웹 화면에서 로그인할 때 'remember-me'는 대부분 체크박스를 이용해 처리, 체크박스 태그는 name 속성을 의미
			- token-validity-seconds : 쿠키 유효시간 지정
		-->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/>
	</security:http>
	
	<!-- 
		스프링 시큐리티가 동작하기 위해서 Authentication Manager가 필요
		<security:authentication-manager> 부분이 스프링 시큐리티가 스프링 MVC에서 작동하는 시작 지점
	 -->
	<security:authentication-manager>
		<!-- userDetailsService 클래스를 빈으로 생성하여 user-service-ref에 할당 -->
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<!-- 계정 설정 및 권한 부여 부분을 JDBC와 연결 
				
				이전 코드1
				<security:user-service>
					<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>	
					<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN"/>
				</security:user-service>
				
				이전코드2
				data-source-ref : JDBC 연결 정보
				users-by-username-query속성과 authorities-by-username-query속성을 이용하면
				기존 테이블을 이용해 사용자 인증 및 권한 확인할 수 있음.
				<security:jdbc-user-service 
					data-source-ref="dataSource" 
					users-by-username-query="select userid, userpw, enabled from tb1_member where userid = ? "
					authorities-by-username-query="select userid,auth from tb1_member_auth where userid = ? "
				/>
			-->
			
			<!-- 커스텀 패스워드 인코더에서 스프링 시큐리티에서 지원하는 패스워드 인코더로 변경 -->
			<!-- <security:password-encoder ref="customPasswordEncoder"/> -->
			<security:password-encoder ref="bcryptPasswordEncoder"/>
		</security:authentication-provider>
	</security:authentication-manager>
</beans>
